{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(authService, router,\n  // private storageService: StorageService,\n  // private toast: NgToastService,\n  loaderService) {\n    this.authService = authService;\n    this.router = router;\n    this.loaderService = loaderService;\n    this.form = {\n      firstname: null,\n      lastname: null,\n      email: null,\n      password: null\n    };\n    this.isSuccessful = false;\n    this.isSignUpFailed = false;\n    this.errorMessage = '';\n    this.message = '';\n  }\n  ngOnInit() {\n    this.storageService.getUser();\n  }\n  onSubmit() {\n    this.loaderService.show(); // Show the loader\n    const {\n      firstname,\n      lastname,\n      email,\n      password\n    } = this.form;\n    this.authService.register(firstname, lastname, email, password).subscribe({\n      next: data => {\n        this.storageService.saveUser(data);\n        this.loggedUser = data;\n        const token = data.accessToken;\n        console.log(token);\n        // Store the token in session storage\n        sessionStorage.setItem('accessToken', token);\n        Swal.fire({\n          title: 'Success!',\n          text: 'You have successfully logged in.',\n          icon: 'success',\n          confirmButtonText: 'OK',\n          confirmButtonColor: '#10b981'\n        }).then(() => {\n          this.storageService.getUser();\n          this.router.navigate(['/onboarding']);\n        });\n      },\n      error: () => {\n        Swal.fire({\n          title: 'Error!',\n          text: 'User Already Exist!, Please use a different email',\n          icon: 'error',\n          confirmButtonText: 'OK',\n          confirmButtonColor: '#10b981'\n        }).then(() => {\n          this.reloadPage();\n        });\n      },\n      complete: () => {\n        this.loaderService.hide(); // Hide the loader\n      }\n    });\n  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","RegisterComponent","constructor","authService","router","loaderService","form","firstname","lastname","email","password","isSuccessful","isSignUpFailed","errorMessage","message","ngOnInit","storageService","getUser","onSubmit","show","register","subscribe","next","data","saveUser","loggedUser","token","accessToken","console","log","sessionStorage","setItem","Swal","fire","title","text","icon","confirmButtonText","confirmButtonColor","then","navigate","error","reloadPage","complete","hide","window","location","reload","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\lelethu\\Desktop\\MentaWell-1\\src\\Client\\src\\app\\pages\\auth\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n\r\n  // formData: any = {}; // Object to store form data\r\n  // registrationSuccess: boolean = false;\r\n  // registrationError: string | null = null;\r\n  // constructor(public authservice: AuthService, public router: Router) {}\r\n\r\n  // registerUser(firstname: string, lastname: string, email: string, password :string ) {\r\n  // onSubmit() {\r\n    // const { fullname, email, password } = this.formData;\r\n\r\n    // this.authservice.register(fullname, email, password).subscribe(\r\n    //     (response) => {\r\n    //       // Handle successful registration, e.g., redirect to login page\r\n    //       console.log(response);\r\n    //       console.log('successfully registered');\r\n    //       this.registrationSuccess = true;\r\n    //       this.registrationError = null;\r\n    //       alert(\"registration success\")\r\n    //       this.router.navigate(['/login']);\r\n    //     },\r\n    //     (error) => {\r\n    //       // Handle registration error, e.g., display an error message\r\n    //       console.log(error);\r\n    //       this.registrationSuccess = false;\r\n    //       this.registrationError =\r\n    //         'Registration failed. Please try again later.';\r\n    //         alert(\"Registration failed. Please try again later.\")\r\n    //     }\r\n    //   );\r\n    //   console.log(this.formData)\r\n  // }\r\n// }\r\nloggedUser!: user;\r\nform: any = {\r\n  firstname: null,\r\n  lastname: null,\r\n  email: null,\r\n  password: null\r\n};\r\nisSuccessful = false;\r\nisSignUpFailed = false;\r\nerrorMessage = '';\r\nmessage = '';\r\n\r\n\r\nconstructor(\r\n  private authService: AuthService,\r\n  private router: Router,\r\n  // private storageService: StorageService,\r\n  // private toast: NgToastService,\r\n  public loaderService: LoaderService\r\n) { }\r\n\r\nngOnInit(): void {\r\n  this.storageService.getUser()\r\n\r\n}\r\n\r\nonSubmit(): void {\r\n  this.loaderService.show(); // Show the loader\r\n  const { firstname, lastname, email, password } = this.form;\r\n\r\n  this.authService.register(firstname, lastname, email, password).subscribe({\r\n    next: data => {\r\n      this.storageService.saveUser(data)\r\n\r\n      this.loggedUser = data;\r\n\r\n      const token = data.accessToken;\r\n      console.log(token)\r\n\r\n      // Store the token in session storage\r\n      sessionStorage.setItem('accessToken', token);\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: 'You have successfully logged in.',\r\n        icon: 'success',\r\n        confirmButtonText: 'OK',\r\n        confirmButtonColor: '#10b981',\r\n      }).then(() => {\r\n        this.storageService.getUser()\r\n        this.router.navigate(['/onboarding'])\r\n      });\r\n\r\n    },\r\n    error: () => {\r\n\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: 'User Already Exist!, Please use a different email',\r\n        icon: 'error',\r\n        confirmButtonText: 'OK',\r\n        confirmButtonColor: '#10b981'\r\n      }).then(() => {\r\n        this.reloadPage();\r\n      });\r\n    },\r\n    complete: () => {\r\n      this.loaderService.hide(); // Hide the loader\r\n    }\r\n  });\r\n}\r\nreloadPage(): void {\r\n  window.location.reload();\r\n}\r\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAiB1C,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EA8C9BC,YACUC,WAAwB,EACxBC,MAAc;EACtB;EACA;EACOC,aAA4B;IAJ3B,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAGP,KAAAC,aAAa,GAAbA,aAAa;IAjBtB,KAAAC,IAAI,GAAQ;MACVC,SAAS,EAAE,IAAI;MACfC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE;KACX;IACD,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,cAAc,GAAG,KAAK;IACtB,KAAAC,YAAY,GAAG,EAAE;IACjB,KAAAC,OAAO,GAAG,EAAE;EASR;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,CAACC,OAAO,EAAE;EAE/B;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACb,aAAa,CAACc,IAAI,EAAE,CAAC,CAAC;IAC3B,MAAM;MAAEZ,SAAS;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACJ,IAAI;IAE1D,IAAI,CAACH,WAAW,CAACiB,QAAQ,CAACb,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAACW,SAAS,CAAC;MACxEC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAACP,cAAc,CAACQ,QAAQ,CAACD,IAAI,CAAC;QAElC,IAAI,CAACE,UAAU,GAAGF,IAAI;QAEtB,MAAMG,KAAK,GAAGH,IAAI,CAACI,WAAW;QAC9BC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;QAElB;QACAI,cAAc,CAACC,OAAO,CAAC,aAAa,EAAEL,KAAK,CAAC;QAC5CM,IAAI,CAACC,IAAI,CAAC;UACRC,KAAK,EAAE,UAAU;UACjBC,IAAI,EAAE,kCAAkC;UACxCC,IAAI,EAAE,SAAS;UACfC,iBAAiB,EAAE,IAAI;UACvBC,kBAAkB,EAAE;SACrB,CAAC,CAACC,IAAI,CAAC,MAAK;UACX,IAAI,CAACvB,cAAc,CAACC,OAAO,EAAE;UAC7B,IAAI,CAACb,MAAM,CAACoC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC,CAAC;MAEJ,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAK;QAEVT,IAAI,CAACC,IAAI,CAAC;UACRC,KAAK,EAAE,QAAQ;UACfC,IAAI,EAAE,mDAAmD;UACzDC,IAAI,EAAE,OAAO;UACbC,iBAAiB,EAAE,IAAI;UACvBC,kBAAkB,EAAE;SACrB,CAAC,CAACC,IAAI,CAAC,MAAK;UACX,IAAI,CAACG,UAAU,EAAE;QACnB,CAAC,CAAC;MACJ,CAAC;MACDC,QAAQ,EAAEA,CAAA,KAAK;QACb,IAAI,CAACtC,aAAa,CAACuC,IAAI,EAAE,CAAC,CAAC;MAC7B;KACD,CAAC;EACJ;;EACAF,UAAUA,CAAA;IACRG,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B;CACC;AA1GY9C,iBAAiB,GAAA+C,UAAA,EAL7BhD,SAAS,CAAC;EACTiD,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWlD,iBAAiB,CA0G7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}