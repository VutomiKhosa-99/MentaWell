{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.formData = {}; // Object to store form data\n    this.loginSuccess = false;\n    this.loginError = null;\n  }\n  onSubmit() {\n    const {\n      email,\n      password\n    } = this.formData;\n    this.authService.loginUser(email, password).subscribe(response => {\n      this.loginSuccess = true;\n      this.loginError = null;\n      // Handle successful login, e.g., redirect to the user dashboard\n      console.log(this.formData, \"fgcgvhvgvgvyvhv\");\n      // Store the token securely (e.g., in local storage)\n      //  localStorage.setItem('token', response.token);\n      alert(\"login success\");\n      //  this.router.navigate(['/trackorder']);\n    }, error => {\n      this.loginSuccess = false;\n      this.loginError = 'Login failed. Please check your credentials.';\n      // alert(\"Login failed. Please check your credentials\")\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 2,\n    vars: 0,\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" login works!\\n\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["LoginComponent","constructor","authService","router","formData","loginSuccess","loginError","onSubmit","email","password","loginUser","subscribe","response","console","log","alert","error","_","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","_2","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\lelethu\\Desktop\\MentaWell-1\\src\\Client\\src\\app\\pages\\auth\\login\\login.component.ts","C:\\Users\\lelethu\\Desktop\\MentaWell-1\\src\\Client\\src\\app\\pages\\auth\\login\\login.component.html"],"sourcesContent":["\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent  {\r\n\r\n  formData: any = {}; // Object to store form data\r\n  loginSuccess: boolean = false;\r\n  loginError: string | null = null;\r\n\r\n  constructor( private authService:AuthService , public router: Router) { }\r\n\r\n  \r\n  onSubmit() {\r\n    \r\n    const { email, password } = this.formData;\r\n    this.authService.loginUser(email, password).subscribe(\r\n      (response) => {\r\n        this.loginSuccess = true;\r\n        this.loginError = null;\r\n        // Handle successful login, e.g., redirect to the user dashboard\r\n        console.log(this.formData,\"fgcgvhvgvgvyvhv\")\r\n         // Store the token securely (e.g., in local storage)\r\n        //  localStorage.setItem('token', response.token);\r\n         alert(\"login success\")\r\n        //  this.router.navigate(['/trackorder']);\r\n         \r\n         \r\n      },\r\n      (error) => {\r\n        this.loginSuccess = false;\r\n        this.loginError = 'Login failed. Please check your credentials.';\r\n        // alert(\"Login failed. Please check your credentials\")\r\n      }\r\n    );\r\n\r\n    \r\n  }\r\n}\r\n","<p>\r\n  login works!\r\n</p>\r\n"],"mappings":";;;AAYA,OAAM,MAAOA,cAAc;EAMzBC,YAAqBC,WAAuB,EAAUC,MAAc;IAA/C,KAAAD,WAAW,GAAXA,WAAW;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAJ5D,KAAAC,QAAQ,GAAQ,EAAE,CAAC,CAAC;IACpB,KAAAC,YAAY,GAAY,KAAK;IAC7B,KAAAC,UAAU,GAAkB,IAAI;EAEwC;EAGxEC,QAAQA,CAAA;IAEN,MAAM;MAAEC,KAAK;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACL,QAAQ;IACzC,IAAI,CAACF,WAAW,CAACQ,SAAS,CAACF,KAAK,EAAEC,QAAQ,CAAC,CAACE,SAAS,CAClDC,QAAQ,IAAI;MACX,IAAI,CAACP,YAAY,GAAG,IAAI;MACxB,IAAI,CAACC,UAAU,GAAG,IAAI;MACtB;MACAO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,QAAQ,EAAC,iBAAiB,CAAC;MAC3C;MACD;MACCW,KAAK,CAAC,eAAe,CAAC;MACvB;IAGF,CAAC,EACAC,KAAK,IAAI;MACR,IAAI,CAACX,YAAY,GAAG,KAAK;MACzB,IAAI,CAACC,UAAU,GAAG,8CAA8C;MAChE;IACF,CAAC,CACF;EAGH;EAAC,QAAAW,CAAA,G;qBAjCUjB,cAAc,EAAAkB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAdxB,cAAc;IAAAyB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCZ3BZ,EAAA,CAAAc,cAAA,QAAG;QACDd,EAAA,CAAAe,MAAA,sBACF;QAAAf,EAAA,CAAAgB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}