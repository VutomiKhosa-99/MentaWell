{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nconst baseUrl = environment.baseUrl;\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  // for registration\n  register(fullname, email, password) {\n    return this.http.post(baseUrl + 'api/users/signup', {\n      fullname,\n      email,\n      password\n    }, httpOptions);\n  }\n  // for login\n  loginUser(email, password) {\n    const userData = {\n      email,\n      password\n    };\n    return this.http.post(`${baseUrl}api/users/login`, userData);\n  }\n  logout() {\n    return this.http.post(baseUrl + 'signout', {}, httpOptions);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","httpOptions","headers","baseUrl","AuthService","constructor","http","register","fullname","email","password","post","loginUser","userData","logout","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\lelethu\\Desktop\\MentaWell-1\\src\\Client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders } from '@angular/common/http'\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../environment/environment';\r\n\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\nconst baseUrl = environment.baseUrl;\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\nconstructor( private http: HttpClient) { }\r\n\r\n// for registration\r\n\r\nregister(fullname: string, email: string, password :string): Observable<any> {\r\n\r\n  return this.http.post(\r\n    baseUrl + 'api/users/signup',\r\n    {\r\n      fullname , email, password\r\n    },\r\n    httpOptions\r\n  );\r\n}\r\n\r\n\r\n// for login\r\n\r\nloginUser(email: string, password: string): Observable<any> {\r\n  const userData = { email, password };\r\n  return this.http.post(`${baseUrl}api/users/login`, userData);\r\n}\r\n\r\n\r\nlogout(): Observable<any> {\r\n  return this.http.post(baseUrl + 'signout', {}, httpOptions);\r\n}\r\n\r\n\r\n}\r\n"],"mappings":"AACA,SAAoBA,WAAW,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,4BAA4B;;;AAGxD,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAED,MAAMI,OAAO,GAAGH,WAAW,CAACG,OAAO;AAOnC,OAAM,MAAOC,WAAW;EAExBC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAEzC;EAEAC,QAAQA,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IAExD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CACnBR,OAAO,GAAG,kBAAkB,EAC5B;MACEK,QAAQ;MAAGC,KAAK;MAAEC;KACnB,EACDT,WAAW,CACZ;EACH;EAGA;EAEAW,SAASA,CAACH,KAAa,EAAEC,QAAgB;IACvC,MAAMG,QAAQ,GAAG;MAAEJ,KAAK;MAAEC;IAAQ,CAAE;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAGR,OAAO,iBAAiB,EAAEU,QAAQ,CAAC;EAC9D;EAGAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACR,IAAI,CAACK,IAAI,CAACR,OAAO,GAAG,SAAS,EAAE,EAAE,EAAEF,WAAW,CAAC;EAC7D;EAAC,QAAAc,CAAA,G;qBA5BYX,WAAW,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXhB,WAAW;IAAAiB,OAAA,EAAXjB,WAAW,CAAAkB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}